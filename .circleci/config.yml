version: 2
jobs:
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
  build:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            echo "source venv/bin/activate" >> $BASH_ENV
      - save_cache: # special step to save dependency cache
          key: v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Build docker container
          command: |
            . venv/bin/activate
             python ansible-container --var-file cgminer_vars.yml build
      - run:
          name: Create docker config.json
          command: mkdir -p ~/.docker
      - run:
          name: Make Docker Config file
          command: |
           cat <<'EOF' | sudo tee ~/.docker/config.json
           {
              "auths": {
                 "https://index.docker.io/v1/": {
                        "auth": "${DOCKER_CONFIG_PASSWORD}"
                 }
              },
              "HttpHeaders": {
                    "User-Agent": "Docker-Client/18.03.1-ce (linux)"
              }
           }
           EOF
      - run:
          name:  Push Container
          command: |
              mkdir -p ~/.docker
              ansible-container --var-file cgminer_vars.yml push

          #command: echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test
#
#      - store_artifacts:
#          path: test-reports
#          destination: test-reports
